problem_name: compute_poly

problem_description: |
  A polynomial function is a function with coefficients, variables and
  constants. A polynomial function is said to be the nth degree polynomial
  if there is a term in the function with the variable to the nth degree.
  For example, a 4th degree polynomial must contain the term x^4 with some
  coefficient multiplied to it.<br><br>

  Write a function that takes a list of coefficients (from 0th to nth degree)
  and a value <code>x</code>, and returns the polynomial computed at
  <code>x</code>.<br><br>

  Write this function using a <b>for</b> loop, not a <b>while</b> loop.<br><br>

  <pre><code>
  >> poly([4], 2) # 4*(2**0)
  4
  >> poly([4, 5], 2) # 4*(2**0) + 5*(2**1)
  14
  >> poly([2,4,7], 6) # 2*(6**0) + 4*(6**1) + 7*(6**2)
  276
  </code></pre>

code_lines: |
  def poly(coeffs, x): #0given
  total = 0
  for power, coeff in enumerate(coeffs):
  total = total + !BLANK * (!BLANK ** !BLANK)
  return !BLANK

solution: |
  def poly(coeffs, x):
      # Keep track of the total as we iterate through each term.
      # Each term is of the form coeff*(x**power).
      total = 0
      # Extract the power and coefficient for each term.
      for power, coeff in enumerate(coeffs):
          # Add the value of the term to the total.
          total = total + coeff * (x ** power)
      return total

test_fn: poly

test_cases:
  - fn_args: [[4], 2]
    expected: 4
  - fn_args: [[4, 5], 2]
    expected: 14
  - fn_args: [[2, 4, 7], 6]
    expected: 278
  - fn_args: [[2, 4, 7], 1]
    expected: 13
  - fn_args: [[1,2,3,4,5,6], 7]
    expected: 114381

hidden_tests:
  - fn_args: [[10], 3]
    expected: 10
  - fn_args: [[6,5,4,3,2,1], 7]
    expected: 22875
  - fn_args: [[1,2,3,4,5,6], 8]
    expected: 219345
